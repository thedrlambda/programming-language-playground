"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxErr = exports.ParseResult = exports.parse = exports.Parser = exports.call = exports.variable = exports.number_expr = exports.paren_expr = exports.sub = exports.assign = exports._arg_list_non_empty_2 = exports._arg_list_non_empty_1 = exports.arg_list = exports.short_if = exports.long_if = exports.decl = exports.while_no_short_ifs_ = exports.while_ = exports.return_ = exports.block = exports.assignment = exports.call_stmt = exports.for_no_short_ifs_ = exports.for_ = exports._stmt_list_non_empty_2 = exports._stmt_list_non_empty_1 = exports.stmt_list = exports._param_list_non_empty_2 = exports._param_list_non_empty_1 = exports.param_list = exports.func = exports._top_level_list_non_empty_2 = exports._top_level_list_non_empty_1 = exports.ASTKinds = void 0;
/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---import * as Ast from "./ast";---
* top_level_list_non_empty := _top_level_list_non_empty_1 | _top_level_list_non_empty_2
* _top_level_list_non_empty_1 := _ value=top_level _
*                             .asArray = Ast.TopLevel[] { return [this.value.ast] }
* _top_level_list_non_empty_2 := _ hd=top_level _ tl=top_level_list_non_empty _
*                             .asArray = Ast.TopLevel[] { return [this.hd.ast, ...this.tl.asArray] }
* top_level := func
* func := 'function' _ name=ident _ '\(' params=param_list '\)' _ '{' body=stmt_list '}'
*       .ast = Ast.TopLevel { return new Ast.Function(this.name, this.params.asArray, this.body.asArray) }
* param_list_non_empty := _param_list_non_empty_1 | _param_list_non_empty_2
* param_list := a=param_list_non_empty?
*             .asArray = Ast.ident[] { return this.a === null ? [] : this.a.asArray }
* _param_list_non_empty_1 := _ value=ident _
*                       .asArray = Ast.ident[] { return [this.value] }
* _param_list_non_empty_2 := _ new_=ident _ ',' _ list=param_list_non_empty _
*                       .asArray = Ast.ident[] { return [this.new_, ...this.list.asArray] }
* stmt_list_non_empty := _stmt_list_non_empty_1 | _stmt_list_non_empty_2
* stmt_list := a=stmt_list_non_empty?
*            .asArray = Ast.Stmt[] { return this.a === null ? [] : this.a.asArray }
* _stmt_list_non_empty_1 := _ value=stmt _
*                       .asArray = Ast.Stmt[] { return [this.value.ast] }
* _stmt_list_non_empty_2 := _ list=stmt_list_non_empty _ ',' _ new_=expr _
*                       .asArray = Ast.Stmt[] { return [...this.list.asArray, this.new_.ast] }
* stmt := decl | stmt_no_decl
* stmt_no_decl := short_if
*               | long_if
*               | call_stmt
*               | assignment
*               | block
*               | return_
*               | while_
*               | for_
* stmt_no_decl_no_short_if := short_if | stmt_no_short_ifs
* stmt_no_short_ifs := long_if
*                    | call_stmt
*                    | assignment
*                    | block
*                    | return_
*                    | while_no_short_ifs_
*                    | for_no_short_ifs_
* for_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt
*       .ast = Ast.Stmt {
*         let w = new Ast.While(this.cond.ast, new Ast.Block([
*           this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
*         ]));
*         return this.decl === null
*               ? w
*               : new Ast.Block([
*                 this.decl.ast, w
*               ])
*       }
* for_no_short_ifs_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt_no_short_ifs
*       .ast = Ast.Stmt {
*         let w = new Ast.While(this.cond.ast, new Ast.Block([
*           this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
*         ]));
*         return this.decl === null
*               ? w
*               : new Ast.Block([
*                 this.decl.ast, w
*               ])
*       }
* call_stmt := expr=call _ ';'
*            .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
* assignment := expr=assign _ ';'
*             .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
* block := '{' _ block=stmt_list _ '}'
*        .ast = Ast.Stmt { return new Ast.Block(this.block.asArray) }
* return_ := 'return' _ expr=expr _ ';'
*         .ast = Ast.Stmt { return new Ast.Return(this.expr.ast) }
* while_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
*        .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }
* while_no_short_ifs_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs
*        .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }
* decl_like := decl | assignment
* decl := 'var' _ assignee=ident _ '=' _ value=expr ';'
*       .ast = Ast.Stmt { return new Ast.Decl(this.assignee, this.value.ast) }
* long_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs _ 'else' _ else_=stmt_no_decl
*          .ast = Ast.Stmt { return new Ast.IfElse(this.condition.ast, this.body.ast, this.else_.ast) }
* short_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
*           .ast = Ast.Stmt { return new Ast.If(this.condition.ast, this.body.ast) }
* arg_list_non_empty := _arg_list_non_empty_1 | _arg_list_non_empty_2
* arg_list := a=arg_list_non_empty?
*           .asArray = Ast.Expr[] { return this.a === null ? [] : this.a.asArray }
* _arg_list_non_empty_1 := _ value=expr _
*                       .asArray = Ast.Expr[] { return [this.value.ast] }
* _arg_list_non_empty_2 := _ list=arg_list_non_empty _ ',' _ new_=expr _
*                       .asArray = Ast.Expr[] { return [...this.list.asArray, this.new_.ast] }
* expr := assign_expr
* assign := assignee=ident _ '=' _ value=assign_expr
*         .ast = Ast.Expr { return new Ast.Assignment(this.assignee, this.value.ast) }
* assign_expr := term | assign
* term := factor | sub
* sub := left=term _ '-' _ right=factor
*      .ast = Ast.Expr { return new Ast.Sub(this.left.ast, this.right.ast) }
* factor := number_expr | paren_expr | variable | call
* paren_expr := '\(' _ expr=expr _ '\)'
*             .ast = Ast.Expr { return this.expr.ast }
* number_expr := num=num
*         .ast = Ast.Expr { return new Ast.NumberExpr(+this.num) }
* variable := v=ident
*           .ast = Ast.Expr { return new Ast.Var(this.v) }
* call := callee=ident _ '\(' args=arg_list '\)'
*       .ast = Ast.Expr { return new Ast.Call(this.callee, this.args.asArray) }
* num := '[0-9]+'
* ident := pos=@ value='[a-zA-Z_][a-zA-Z_0-9]*'
* _ := '\s*'
*/
var Ast = __importStar(require("./ast"));
var ASTKinds;
(function (ASTKinds) {
    ASTKinds["top_level_list_non_empty_1"] = "top_level_list_non_empty_1";
    ASTKinds["top_level_list_non_empty_2"] = "top_level_list_non_empty_2";
    ASTKinds["_top_level_list_non_empty_1"] = "_top_level_list_non_empty_1";
    ASTKinds["_top_level_list_non_empty_2"] = "_top_level_list_non_empty_2";
    ASTKinds["top_level"] = "top_level";
    ASTKinds["func"] = "func";
    ASTKinds["param_list_non_empty_1"] = "param_list_non_empty_1";
    ASTKinds["param_list_non_empty_2"] = "param_list_non_empty_2";
    ASTKinds["param_list"] = "param_list";
    ASTKinds["_param_list_non_empty_1"] = "_param_list_non_empty_1";
    ASTKinds["_param_list_non_empty_2"] = "_param_list_non_empty_2";
    ASTKinds["stmt_list_non_empty_1"] = "stmt_list_non_empty_1";
    ASTKinds["stmt_list_non_empty_2"] = "stmt_list_non_empty_2";
    ASTKinds["stmt_list"] = "stmt_list";
    ASTKinds["_stmt_list_non_empty_1"] = "_stmt_list_non_empty_1";
    ASTKinds["_stmt_list_non_empty_2"] = "_stmt_list_non_empty_2";
    ASTKinds["stmt_1"] = "stmt_1";
    ASTKinds["stmt_2"] = "stmt_2";
    ASTKinds["stmt_no_decl_1"] = "stmt_no_decl_1";
    ASTKinds["stmt_no_decl_2"] = "stmt_no_decl_2";
    ASTKinds["stmt_no_decl_3"] = "stmt_no_decl_3";
    ASTKinds["stmt_no_decl_4"] = "stmt_no_decl_4";
    ASTKinds["stmt_no_decl_5"] = "stmt_no_decl_5";
    ASTKinds["stmt_no_decl_6"] = "stmt_no_decl_6";
    ASTKinds["stmt_no_decl_7"] = "stmt_no_decl_7";
    ASTKinds["stmt_no_decl_8"] = "stmt_no_decl_8";
    ASTKinds["stmt_no_decl_no_short_if_1"] = "stmt_no_decl_no_short_if_1";
    ASTKinds["stmt_no_decl_no_short_if_2"] = "stmt_no_decl_no_short_if_2";
    ASTKinds["stmt_no_short_ifs_1"] = "stmt_no_short_ifs_1";
    ASTKinds["stmt_no_short_ifs_2"] = "stmt_no_short_ifs_2";
    ASTKinds["stmt_no_short_ifs_3"] = "stmt_no_short_ifs_3";
    ASTKinds["stmt_no_short_ifs_4"] = "stmt_no_short_ifs_4";
    ASTKinds["stmt_no_short_ifs_5"] = "stmt_no_short_ifs_5";
    ASTKinds["stmt_no_short_ifs_6"] = "stmt_no_short_ifs_6";
    ASTKinds["stmt_no_short_ifs_7"] = "stmt_no_short_ifs_7";
    ASTKinds["for_"] = "for_";
    ASTKinds["for_no_short_ifs_"] = "for_no_short_ifs_";
    ASTKinds["call_stmt"] = "call_stmt";
    ASTKinds["assignment"] = "assignment";
    ASTKinds["block"] = "block";
    ASTKinds["return_"] = "return_";
    ASTKinds["while_"] = "while_";
    ASTKinds["while_no_short_ifs_"] = "while_no_short_ifs_";
    ASTKinds["decl_like_1"] = "decl_like_1";
    ASTKinds["decl_like_2"] = "decl_like_2";
    ASTKinds["decl"] = "decl";
    ASTKinds["long_if"] = "long_if";
    ASTKinds["short_if"] = "short_if";
    ASTKinds["arg_list_non_empty_1"] = "arg_list_non_empty_1";
    ASTKinds["arg_list_non_empty_2"] = "arg_list_non_empty_2";
    ASTKinds["arg_list"] = "arg_list";
    ASTKinds["_arg_list_non_empty_1"] = "_arg_list_non_empty_1";
    ASTKinds["_arg_list_non_empty_2"] = "_arg_list_non_empty_2";
    ASTKinds["expr"] = "expr";
    ASTKinds["assign"] = "assign";
    ASTKinds["assign_expr_1"] = "assign_expr_1";
    ASTKinds["assign_expr_2"] = "assign_expr_2";
    ASTKinds["term_1"] = "term_1";
    ASTKinds["term_2"] = "term_2";
    ASTKinds["sub"] = "sub";
    ASTKinds["factor_1"] = "factor_1";
    ASTKinds["factor_2"] = "factor_2";
    ASTKinds["factor_3"] = "factor_3";
    ASTKinds["factor_4"] = "factor_4";
    ASTKinds["paren_expr"] = "paren_expr";
    ASTKinds["number_expr"] = "number_expr";
    ASTKinds["variable"] = "variable";
    ASTKinds["call"] = "call";
    ASTKinds["num"] = "num";
    ASTKinds["ident"] = "ident";
    ASTKinds["_"] = "_";
})(ASTKinds = exports.ASTKinds || (exports.ASTKinds = {}));
var _top_level_list_non_empty_1 = /** @class */ (function () {
    function _top_level_list_non_empty_1(value) {
        var _this = this;
        this.kind = ASTKinds._top_level_list_non_empty_1;
        this.value = value;
        this.asArray = (function () {
            return [_this.value.ast];
        })();
    }
    return _top_level_list_non_empty_1;
}());
exports._top_level_list_non_empty_1 = _top_level_list_non_empty_1;
var _top_level_list_non_empty_2 = /** @class */ (function () {
    function _top_level_list_non_empty_2(hd, tl) {
        var _this = this;
        this.kind = ASTKinds._top_level_list_non_empty_2;
        this.hd = hd;
        this.tl = tl;
        this.asArray = (function () {
            return __spread([_this.hd.ast], _this.tl.asArray);
        })();
    }
    return _top_level_list_non_empty_2;
}());
exports._top_level_list_non_empty_2 = _top_level_list_non_empty_2;
var func = /** @class */ (function () {
    function func(name, params, body) {
        var _this = this;
        this.kind = ASTKinds.func;
        this.name = name;
        this.params = params;
        this.body = body;
        this.ast = (function () {
            return new Ast.Function(_this.name, _this.params.asArray, _this.body.asArray);
        })();
    }
    return func;
}());
exports.func = func;
var param_list = /** @class */ (function () {
    function param_list(a) {
        var _this = this;
        this.kind = ASTKinds.param_list;
        this.a = a;
        this.asArray = (function () {
            return _this.a === null ? [] : _this.a.asArray;
        })();
    }
    return param_list;
}());
exports.param_list = param_list;
var _param_list_non_empty_1 = /** @class */ (function () {
    function _param_list_non_empty_1(value) {
        var _this = this;
        this.kind = ASTKinds._param_list_non_empty_1;
        this.value = value;
        this.asArray = (function () {
            return [_this.value];
        })();
    }
    return _param_list_non_empty_1;
}());
exports._param_list_non_empty_1 = _param_list_non_empty_1;
var _param_list_non_empty_2 = /** @class */ (function () {
    function _param_list_non_empty_2(new_, list) {
        var _this = this;
        this.kind = ASTKinds._param_list_non_empty_2;
        this.new_ = new_;
        this.list = list;
        this.asArray = (function () {
            return __spread([_this.new_], _this.list.asArray);
        })();
    }
    return _param_list_non_empty_2;
}());
exports._param_list_non_empty_2 = _param_list_non_empty_2;
var stmt_list = /** @class */ (function () {
    function stmt_list(a) {
        var _this = this;
        this.kind = ASTKinds.stmt_list;
        this.a = a;
        this.asArray = (function () {
            return _this.a === null ? [] : _this.a.asArray;
        })();
    }
    return stmt_list;
}());
exports.stmt_list = stmt_list;
var _stmt_list_non_empty_1 = /** @class */ (function () {
    function _stmt_list_non_empty_1(value) {
        var _this = this;
        this.kind = ASTKinds._stmt_list_non_empty_1;
        this.value = value;
        this.asArray = (function () {
            return [_this.value.ast];
        })();
    }
    return _stmt_list_non_empty_1;
}());
exports._stmt_list_non_empty_1 = _stmt_list_non_empty_1;
var _stmt_list_non_empty_2 = /** @class */ (function () {
    function _stmt_list_non_empty_2(list, new_) {
        var _this = this;
        this.kind = ASTKinds._stmt_list_non_empty_2;
        this.list = list;
        this.new_ = new_;
        this.asArray = (function () {
            return __spread(_this.list.asArray, [_this.new_.ast]);
        })();
    }
    return _stmt_list_non_empty_2;
}());
exports._stmt_list_non_empty_2 = _stmt_list_non_empty_2;
var for_ = /** @class */ (function () {
    function for_(decl, cond, inc, body) {
        var _this = this;
        this.kind = ASTKinds.for_;
        this.decl = decl;
        this.cond = cond;
        this.inc = inc;
        this.body = body;
        this.ast = (function () {
            var w = new Ast.While(_this.cond.ast, new Ast.Block([
                _this.body.ast, new Ast.ExprStmt(_this.inc === null ? new Ast.NumberExpr(0) : _this.inc.ast)
            ]));
            return _this.decl === null
                ? w
                : new Ast.Block([
                    _this.decl.ast, w
                ]);
        })();
    }
    return for_;
}());
exports.for_ = for_;
var for_no_short_ifs_ = /** @class */ (function () {
    function for_no_short_ifs_(decl, cond, inc, body) {
        var _this = this;
        this.kind = ASTKinds.for_no_short_ifs_;
        this.decl = decl;
        this.cond = cond;
        this.inc = inc;
        this.body = body;
        this.ast = (function () {
            var w = new Ast.While(_this.cond.ast, new Ast.Block([
                _this.body.ast, new Ast.ExprStmt(_this.inc === null ? new Ast.NumberExpr(0) : _this.inc.ast)
            ]));
            return _this.decl === null
                ? w
                : new Ast.Block([
                    _this.decl.ast, w
                ]);
        })();
    }
    return for_no_short_ifs_;
}());
exports.for_no_short_ifs_ = for_no_short_ifs_;
var call_stmt = /** @class */ (function () {
    function call_stmt(expr) {
        var _this = this;
        this.kind = ASTKinds.call_stmt;
        this.expr = expr;
        this.ast = (function () {
            return new Ast.ExprStmt(_this.expr.ast);
        })();
    }
    return call_stmt;
}());
exports.call_stmt = call_stmt;
var assignment = /** @class */ (function () {
    function assignment(expr) {
        var _this = this;
        this.kind = ASTKinds.assignment;
        this.expr = expr;
        this.ast = (function () {
            return new Ast.ExprStmt(_this.expr.ast);
        })();
    }
    return assignment;
}());
exports.assignment = assignment;
var block = /** @class */ (function () {
    function block(block) {
        var _this = this;
        this.kind = ASTKinds.block;
        this.block = block;
        this.ast = (function () {
            return new Ast.Block(_this.block.asArray);
        })();
    }
    return block;
}());
exports.block = block;
var return_ = /** @class */ (function () {
    function return_(expr) {
        var _this = this;
        this.kind = ASTKinds.return_;
        this.expr = expr;
        this.ast = (function () {
            return new Ast.Return(_this.expr.ast);
        })();
    }
    return return_;
}());
exports.return_ = return_;
var while_ = /** @class */ (function () {
    function while_(condition, body) {
        var _this = this;
        this.kind = ASTKinds.while_;
        this.condition = condition;
        this.body = body;
        this.ast = (function () {
            return new Ast.While(_this.condition.ast, _this.body.ast);
        })();
    }
    return while_;
}());
exports.while_ = while_;
var while_no_short_ifs_ = /** @class */ (function () {
    function while_no_short_ifs_(condition, body) {
        var _this = this;
        this.kind = ASTKinds.while_no_short_ifs_;
        this.condition = condition;
        this.body = body;
        this.ast = (function () {
            return new Ast.While(_this.condition.ast, _this.body.ast);
        })();
    }
    return while_no_short_ifs_;
}());
exports.while_no_short_ifs_ = while_no_short_ifs_;
var decl = /** @class */ (function () {
    function decl(assignee, value) {
        var _this = this;
        this.kind = ASTKinds.decl;
        this.assignee = assignee;
        this.value = value;
        this.ast = (function () {
            return new Ast.Decl(_this.assignee, _this.value.ast);
        })();
    }
    return decl;
}());
exports.decl = decl;
var long_if = /** @class */ (function () {
    function long_if(condition, body, else_) {
        var _this = this;
        this.kind = ASTKinds.long_if;
        this.condition = condition;
        this.body = body;
        this.else_ = else_;
        this.ast = (function () {
            return new Ast.IfElse(_this.condition.ast, _this.body.ast, _this.else_.ast);
        })();
    }
    return long_if;
}());
exports.long_if = long_if;
var short_if = /** @class */ (function () {
    function short_if(condition, body) {
        var _this = this;
        this.kind = ASTKinds.short_if;
        this.condition = condition;
        this.body = body;
        this.ast = (function () {
            return new Ast.If(_this.condition.ast, _this.body.ast);
        })();
    }
    return short_if;
}());
exports.short_if = short_if;
var arg_list = /** @class */ (function () {
    function arg_list(a) {
        var _this = this;
        this.kind = ASTKinds.arg_list;
        this.a = a;
        this.asArray = (function () {
            return _this.a === null ? [] : _this.a.asArray;
        })();
    }
    return arg_list;
}());
exports.arg_list = arg_list;
var _arg_list_non_empty_1 = /** @class */ (function () {
    function _arg_list_non_empty_1(value) {
        var _this = this;
        this.kind = ASTKinds._arg_list_non_empty_1;
        this.value = value;
        this.asArray = (function () {
            return [_this.value.ast];
        })();
    }
    return _arg_list_non_empty_1;
}());
exports._arg_list_non_empty_1 = _arg_list_non_empty_1;
var _arg_list_non_empty_2 = /** @class */ (function () {
    function _arg_list_non_empty_2(list, new_) {
        var _this = this;
        this.kind = ASTKinds._arg_list_non_empty_2;
        this.list = list;
        this.new_ = new_;
        this.asArray = (function () {
            return __spread(_this.list.asArray, [_this.new_.ast]);
        })();
    }
    return _arg_list_non_empty_2;
}());
exports._arg_list_non_empty_2 = _arg_list_non_empty_2;
var assign = /** @class */ (function () {
    function assign(assignee, value) {
        var _this = this;
        this.kind = ASTKinds.assign;
        this.assignee = assignee;
        this.value = value;
        this.ast = (function () {
            return new Ast.Assignment(_this.assignee, _this.value.ast);
        })();
    }
    return assign;
}());
exports.assign = assign;
var sub = /** @class */ (function () {
    function sub(left, right) {
        var _this = this;
        this.kind = ASTKinds.sub;
        this.left = left;
        this.right = right;
        this.ast = (function () {
            return new Ast.Sub(_this.left.ast, _this.right.ast);
        })();
    }
    return sub;
}());
exports.sub = sub;
var paren_expr = /** @class */ (function () {
    function paren_expr(expr) {
        var _this = this;
        this.kind = ASTKinds.paren_expr;
        this.expr = expr;
        this.ast = (function () {
            return _this.expr.ast;
        })();
    }
    return paren_expr;
}());
exports.paren_expr = paren_expr;
var number_expr = /** @class */ (function () {
    function number_expr(num) {
        var _this = this;
        this.kind = ASTKinds.number_expr;
        this.num = num;
        this.ast = (function () {
            return new Ast.NumberExpr(+_this.num);
        })();
    }
    return number_expr;
}());
exports.number_expr = number_expr;
var variable = /** @class */ (function () {
    function variable(v) {
        var _this = this;
        this.kind = ASTKinds.variable;
        this.v = v;
        this.ast = (function () {
            return new Ast.Var(_this.v);
        })();
    }
    return variable;
}());
exports.variable = variable;
var call = /** @class */ (function () {
    function call(callee, args) {
        var _this = this;
        this.kind = ASTKinds.call;
        this.callee = callee;
        this.args = args;
        this.ast = (function () {
            return new Ast.Call(_this.callee, _this.args.asArray);
        })();
    }
    return call;
}());
exports.call = call;
var Parser = /** @class */ (function () {
    function Parser(input) {
        this.negating = false;
        this.pos = { overallPos: 0, line: 1, offset: 0 };
        this.input = input;
    }
    Parser.prototype.reset = function (pos) {
        this.pos = pos;
    };
    Parser.prototype.finished = function () {
        return this.pos.overallPos === this.input.length;
    };
    Parser.prototype.matchtop_level_list_non_empty = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchtop_level_list_non_empty_1($$dpth + 1, $$cr); },
            function () { return _this.matchtop_level_list_non_empty_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchtop_level_list_non_empty_1 = function ($$dpth, $$cr) {
        return this.match_top_level_list_non_empty_1($$dpth + 1, $$cr);
    };
    Parser.prototype.matchtop_level_list_non_empty_2 = function ($$dpth, $$cr) {
        return this.match_top_level_list_non_empty_2($$dpth + 1, $$cr);
    };
    Parser.prototype.match_top_level_list_non_empty_1 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_top_level_list_non_empty_1");
            }
            var $scope$value;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchtop_level($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _top_level_list_non_empty_1($scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_top_level_list_non_empty_2 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_top_level_list_non_empty_2");
            }
            var $scope$hd;
            var $scope$tl;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$hd = _this.matchtop_level($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$tl = _this.matchtop_level_list_non_empty($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _top_level_list_non_empty_2($scope$hd, $scope$tl);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchtop_level = function ($$dpth, $$cr) {
        return this.matchfunc($$dpth + 1, $$cr);
    };
    Parser.prototype.matchfunc = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("func");
            }
            var $scope$name;
            var $scope$params;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["(?:function)"], ["(?:function)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$name = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_2 || (templateObject_2 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && ($scope$params = _this.matchparam_list($$dpth + 1, $$cr)) !== null
                && _this.regexAccept(String.raw(templateObject_3 || (templateObject_3 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_4 || (templateObject_4 = __makeTemplateObject(["(?:{)"], ["(?:{)"]))), $$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_list($$dpth + 1, $$cr)) !== null
                && _this.regexAccept(String.raw(templateObject_5 || (templateObject_5 = __makeTemplateObject(["(?:})"], ["(?:})"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new func($scope$name, $scope$params, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchparam_list_non_empty = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchparam_list_non_empty_1($$dpth + 1, $$cr); },
            function () { return _this.matchparam_list_non_empty_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchparam_list_non_empty_1 = function ($$dpth, $$cr) {
        return this.match_param_list_non_empty_1($$dpth + 1, $$cr);
    };
    Parser.prototype.matchparam_list_non_empty_2 = function ($$dpth, $$cr) {
        return this.match_param_list_non_empty_2($$dpth + 1, $$cr);
    };
    Parser.prototype.matchparam_list = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("param_list");
            }
            var $scope$a;
            var $$res = null;
            if (true
                && (($scope$a = _this.matchparam_list_non_empty($$dpth + 1, $$cr)) || true)) {
                $$res = new param_list($scope$a);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_param_list_non_empty_1 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_param_list_non_empty_1");
            }
            var $scope$value;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _param_list_non_empty_1($scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_param_list_non_empty_2 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_param_list_non_empty_2");
            }
            var $scope$new_;
            var $scope$list;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$new_ = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_6 || (templateObject_6 = __makeTemplateObject(["(?:,)"], ["(?:,)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$list = _this.matchparam_list_non_empty($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _param_list_non_empty_2($scope$new_, $scope$list);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchstmt_list_non_empty = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchstmt_list_non_empty_1($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_list_non_empty_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchstmt_list_non_empty_1 = function ($$dpth, $$cr) {
        return this.match_stmt_list_non_empty_1($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_list_non_empty_2 = function ($$dpth, $$cr) {
        return this.match_stmt_list_non_empty_2($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_list = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("stmt_list");
            }
            var $scope$a;
            var $$res = null;
            if (true
                && (($scope$a = _this.matchstmt_list_non_empty($$dpth + 1, $$cr)) || true)) {
                $$res = new stmt_list($scope$a);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_stmt_list_non_empty_1 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_stmt_list_non_empty_1");
            }
            var $scope$value;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchstmt($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _stmt_list_non_empty_1($scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_stmt_list_non_empty_2 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_stmt_list_non_empty_2");
            }
            var $scope$list;
            var $scope$new_;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$list = _this.matchstmt_list_non_empty($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_7 || (templateObject_7 = __makeTemplateObject(["(?:,)"], ["(?:,)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$new_ = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _stmt_list_non_empty_2($scope$list, $scope$new_);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchstmt = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchstmt_1($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchstmt_1 = function ($$dpth, $$cr) {
        return this.matchdecl($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_2 = function ($$dpth, $$cr) {
        return this.matchstmt_no_decl($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchstmt_no_decl_1($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_2($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_3($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_4($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_5($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_6($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_7($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_8($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchstmt_no_decl_1 = function ($$dpth, $$cr) {
        return this.matchshort_if($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_2 = function ($$dpth, $$cr) {
        return this.matchlong_if($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_3 = function ($$dpth, $$cr) {
        return this.matchcall_stmt($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_4 = function ($$dpth, $$cr) {
        return this.matchassignment($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_5 = function ($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_6 = function ($$dpth, $$cr) {
        return this.matchreturn_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_7 = function ($$dpth, $$cr) {
        return this.matchwhile_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_8 = function ($$dpth, $$cr) {
        return this.matchfor_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_no_short_if = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchstmt_no_decl_no_short_if_1($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_decl_no_short_if_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchstmt_no_decl_no_short_if_1 = function ($$dpth, $$cr) {
        return this.matchshort_if($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_decl_no_short_if_2 = function ($$dpth, $$cr) {
        return this.matchstmt_no_short_ifs($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchstmt_no_short_ifs_1($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_2($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_3($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_4($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_5($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_6($$dpth + 1, $$cr); },
            function () { return _this.matchstmt_no_short_ifs_7($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchstmt_no_short_ifs_1 = function ($$dpth, $$cr) {
        return this.matchlong_if($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_2 = function ($$dpth, $$cr) {
        return this.matchcall_stmt($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_3 = function ($$dpth, $$cr) {
        return this.matchassignment($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_4 = function ($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_5 = function ($$dpth, $$cr) {
        return this.matchreturn_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_6 = function ($$dpth, $$cr) {
        return this.matchwhile_no_short_ifs_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchstmt_no_short_ifs_7 = function ($$dpth, $$cr) {
        return this.matchfor_no_short_ifs_($$dpth + 1, $$cr);
    };
    Parser.prototype.matchfor_ = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("for_");
            }
            var $scope$decl;
            var $scope$cond;
            var $scope$inc;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_8 || (templateObject_8 = __makeTemplateObject(["(?:for)"], ["(?:for)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_9 || (templateObject_9 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && (($scope$decl = _this.matchdecl_like($$dpth + 1, $$cr)) || true)
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_10 || (templateObject_10 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$cond = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_11 || (templateObject_11 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && (($scope$inc = _this.matchassign($$dpth + 1, $$cr)) || true)
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_12 || (templateObject_12 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt($$dpth + 1, $$cr)) !== null) {
                $$res = new for_($scope$decl, $scope$cond, $scope$inc, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchfor_no_short_ifs_ = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("for_no_short_ifs_");
            }
            var $scope$decl;
            var $scope$cond;
            var $scope$inc;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_13 || (templateObject_13 = __makeTemplateObject(["(?:for)"], ["(?:for)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_14 || (templateObject_14 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && (($scope$decl = _this.matchdecl_like($$dpth + 1, $$cr)) || true)
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_15 || (templateObject_15 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$cond = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_16 || (templateObject_16 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && (($scope$inc = _this.matchassign($$dpth + 1, $$cr)) || true)
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_17 || (templateObject_17 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null) {
                $$res = new for_no_short_ifs_($scope$decl, $scope$cond, $scope$inc, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchcall_stmt = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("call_stmt");
            }
            var $scope$expr;
            var $$res = null;
            if (true
                && ($scope$expr = _this.matchcall($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_18 || (templateObject_18 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new call_stmt($scope$expr);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchassignment = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("assignment");
            }
            var $scope$expr;
            var $$res = null;
            if (true
                && ($scope$expr = _this.matchassign($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_19 || (templateObject_19 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new assignment($scope$expr);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchblock = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("block");
            }
            var $scope$block;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_20 || (templateObject_20 = __makeTemplateObject(["(?:{)"], ["(?:{)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$block = _this.matchstmt_list($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_21 || (templateObject_21 = __makeTemplateObject(["(?:})"], ["(?:})"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new block($scope$block);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchreturn_ = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("return_");
            }
            var $scope$expr;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_22 || (templateObject_22 = __makeTemplateObject(["(?:return)"], ["(?:return)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$expr = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_23 || (templateObject_23 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new return_($scope$expr);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchwhile_ = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("while_");
            }
            var $scope$condition;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_24 || (templateObject_24 = __makeTemplateObject(["(?:while)"], ["(?:while)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_25 || (templateObject_25 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$condition = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_26 || (templateObject_26 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null) {
                $$res = new while_($scope$condition, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchwhile_no_short_ifs_ = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("while_no_short_ifs_");
            }
            var $scope$condition;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_27 || (templateObject_27 = __makeTemplateObject(["(?:while)"], ["(?:while)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_28 || (templateObject_28 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$condition = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_29 || (templateObject_29 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null) {
                $$res = new while_no_short_ifs_($scope$condition, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchdecl_like = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchdecl_like_1($$dpth + 1, $$cr); },
            function () { return _this.matchdecl_like_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchdecl_like_1 = function ($$dpth, $$cr) {
        return this.matchdecl($$dpth + 1, $$cr);
    };
    Parser.prototype.matchdecl_like_2 = function ($$dpth, $$cr) {
        return this.matchassignment($$dpth + 1, $$cr);
    };
    Parser.prototype.matchdecl = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("decl");
            }
            var $scope$assignee;
            var $scope$value;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_30 || (templateObject_30 = __makeTemplateObject(["(?:var)"], ["(?:var)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$assignee = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_31 || (templateObject_31 = __makeTemplateObject(["(?:=)"], ["(?:=)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.regexAccept(String.raw(templateObject_32 || (templateObject_32 = __makeTemplateObject(["(?:;)"], ["(?:;)"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new decl($scope$assignee, $scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchlong_if = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("long_if");
            }
            var $scope$condition;
            var $scope$body;
            var $scope$else_;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_33 || (templateObject_33 = __makeTemplateObject(["(?:if)"], ["(?:if)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_34 || (templateObject_34 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$condition = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_35 || (templateObject_35 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_36 || (templateObject_36 = __makeTemplateObject(["(?:else)"], ["(?:else)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$else_ = _this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null) {
                $$res = new long_if($scope$condition, $scope$body, $scope$else_);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchshort_if = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("short_if");
            }
            var $scope$condition;
            var $scope$body;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_37 || (templateObject_37 = __makeTemplateObject(["(?:if)"], ["(?:if)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_38 || (templateObject_38 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$condition = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_39 || (templateObject_39 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$body = _this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null) {
                $$res = new short_if($scope$condition, $scope$body);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matcharg_list_non_empty = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matcharg_list_non_empty_1($$dpth + 1, $$cr); },
            function () { return _this.matcharg_list_non_empty_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matcharg_list_non_empty_1 = function ($$dpth, $$cr) {
        return this.match_arg_list_non_empty_1($$dpth + 1, $$cr);
    };
    Parser.prototype.matcharg_list_non_empty_2 = function ($$dpth, $$cr) {
        return this.match_arg_list_non_empty_2($$dpth + 1, $$cr);
    };
    Parser.prototype.matcharg_list = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("arg_list");
            }
            var $scope$a;
            var $$res = null;
            if (true
                && (($scope$a = _this.matcharg_list_non_empty($$dpth + 1, $$cr)) || true)) {
                $$res = new arg_list($scope$a);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_arg_list_non_empty_1 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_arg_list_non_empty_1");
            }
            var $scope$value;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _arg_list_non_empty_1($scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_arg_list_non_empty_2 = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("_arg_list_non_empty_2");
            }
            var $scope$list;
            var $scope$new_;
            var $$res = null;
            if (true
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$list = _this.matcharg_list_non_empty($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_40 || (templateObject_40 = __makeTemplateObject(["(?:,)"], ["(?:,)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$new_ = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null) {
                $$res = new _arg_list_non_empty_2($scope$list, $scope$new_);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchexpr = function ($$dpth, $$cr) {
        return this.matchassign_expr($$dpth + 1, $$cr);
    };
    Parser.prototype.matchassign = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("assign");
            }
            var $scope$assignee;
            var $scope$value;
            var $$res = null;
            if (true
                && ($scope$assignee = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_41 || (templateObject_41 = __makeTemplateObject(["(?:=)"], ["(?:=)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$value = _this.matchassign_expr($$dpth + 1, $$cr)) !== null) {
                $$res = new assign($scope$assignee, $scope$value);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchassign_expr = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchassign_expr_1($$dpth + 1, $$cr); },
            function () { return _this.matchassign_expr_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchassign_expr_1 = function ($$dpth, $$cr) {
        return this.matchterm($$dpth + 1, $$cr);
    };
    Parser.prototype.matchassign_expr_2 = function ($$dpth, $$cr) {
        return this.matchassign($$dpth + 1, $$cr);
    };
    Parser.prototype.matchterm = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchterm_1($$dpth + 1, $$cr); },
            function () { return _this.matchterm_2($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchterm_1 = function ($$dpth, $$cr) {
        return this.matchfactor($$dpth + 1, $$cr);
    };
    Parser.prototype.matchterm_2 = function ($$dpth, $$cr) {
        return this.matchsub($$dpth + 1, $$cr);
    };
    Parser.prototype.matchsub = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("sub");
            }
            var $scope$left;
            var $scope$right;
            var $$res = null;
            if (true
                && ($scope$left = _this.matchterm($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_42 || (templateObject_42 = __makeTemplateObject(["(?:-)"], ["(?:-)"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$right = _this.matchfactor($$dpth + 1, $$cr)) !== null) {
                $$res = new sub($scope$left, $scope$right);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchfactor = function ($$dpth, $$cr) {
        var _this = this;
        return this.choice([
            function () { return _this.matchfactor_1($$dpth + 1, $$cr); },
            function () { return _this.matchfactor_2($$dpth + 1, $$cr); },
            function () { return _this.matchfactor_3($$dpth + 1, $$cr); },
            function () { return _this.matchfactor_4($$dpth + 1, $$cr); },
        ]);
    };
    Parser.prototype.matchfactor_1 = function ($$dpth, $$cr) {
        return this.matchnumber_expr($$dpth + 1, $$cr);
    };
    Parser.prototype.matchfactor_2 = function ($$dpth, $$cr) {
        return this.matchparen_expr($$dpth + 1, $$cr);
    };
    Parser.prototype.matchfactor_3 = function ($$dpth, $$cr) {
        return this.matchvariable($$dpth + 1, $$cr);
    };
    Parser.prototype.matchfactor_4 = function ($$dpth, $$cr) {
        return this.matchcall($$dpth + 1, $$cr);
    };
    Parser.prototype.matchparen_expr = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("paren_expr");
            }
            var $scope$expr;
            var $$res = null;
            if (true
                && _this.regexAccept(String.raw(templateObject_43 || (templateObject_43 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && ($scope$expr = _this.matchexpr($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_44 || (templateObject_44 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new paren_expr($scope$expr);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchnumber_expr = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("number_expr");
            }
            var $scope$num;
            var $$res = null;
            if (true
                && ($scope$num = _this.matchnum($$dpth + 1, $$cr)) !== null) {
                $$res = new number_expr($scope$num);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchvariable = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("variable");
            }
            var $scope$v;
            var $$res = null;
            if (true
                && ($scope$v = _this.matchident($$dpth + 1, $$cr)) !== null) {
                $$res = new variable($scope$v);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchcall = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("call");
            }
            var $scope$callee;
            var $scope$args;
            var $$res = null;
            if (true
                && ($scope$callee = _this.matchident($$dpth + 1, $$cr)) !== null
                && _this.match_($$dpth + 1, $$cr) !== null
                && _this.regexAccept(String.raw(templateObject_45 || (templateObject_45 = __makeTemplateObject(["(?:()"], ["(?:\\()"]))), $$dpth + 1, $$cr) !== null
                && ($scope$args = _this.matcharg_list($$dpth + 1, $$cr)) !== null
                && _this.regexAccept(String.raw(templateObject_46 || (templateObject_46 = __makeTemplateObject(["(?:))"], ["(?:\\))"]))), $$dpth + 1, $$cr) !== null) {
                $$res = new call($scope$callee, $scope$args);
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.matchnum = function ($$dpth, $$cr) {
        return this.regexAccept(String.raw(templateObject_47 || (templateObject_47 = __makeTemplateObject(["(?:[0-9]+)"], ["(?:[0-9]+)"]))), $$dpth + 1, $$cr);
    };
    Parser.prototype.matchident = function ($$dpth, $$cr) {
        var _this = this;
        return this.runner($$dpth, function (log) {
            if (log) {
                log("ident");
            }
            var $scope$pos;
            var $scope$value;
            var $$res = null;
            if (true
                && ($scope$pos = _this.mark()) !== null
                && ($scope$value = _this.regexAccept(String.raw(templateObject_48 || (templateObject_48 = __makeTemplateObject(["(?:[a-zA-Z_][a-zA-Z_0-9]*)"], ["(?:[a-zA-Z_][a-zA-Z_0-9]*)"]))), $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.ident, pos: $scope$pos, value: $scope$value };
            }
            return $$res;
        }, $$cr)();
    };
    Parser.prototype.match_ = function ($$dpth, $$cr) {
        return this.regexAccept(String.raw(templateObject_49 || (templateObject_49 = __makeTemplateObject(["(?:s*)"], ["(?:\\s*)"]))), $$dpth + 1, $$cr);
    };
    Parser.prototype.test = function () {
        var mrk = this.mark();
        var res = this.matchtop_level_list_non_empty(0);
        var ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    };
    Parser.prototype.parse = function () {
        var _a;
        var mrk = this.mark();
        var res = this.matchtop_level_list_non_empty(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        var rec = new ErrorTracker();
        this.matchtop_level_list_non_empty(0, rec);
        return new ParseResult(res, (_a = rec.getErr()) !== null && _a !== void 0 ? _a : new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    };
    Parser.prototype.mark = function () {
        return this.pos;
    };
    Parser.prototype.loop = function (func, star) {
        if (star === void 0) { star = false; }
        var mrk = this.mark();
        var res = [];
        for (;;) {
            var t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    };
    Parser.prototype.runner = function ($$dpth, fn, cr) {
        var _this = this;
        return function () {
            var mrk = _this.mark();
            var res = cr ? (function () {
                var extraInfo = [];
                var result = fn(function (msg) { return extraInfo.push(msg); });
                cr.record(mrk, $$dpth, result, _this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            _this.reset(mrk);
            return null;
        };
    };
    Parser.prototype.choice = function (fns) {
        var e_1, _a;
        try {
            for (var fns_1 = __values(fns), fns_1_1 = fns_1.next(); !fns_1_1.done; fns_1_1 = fns_1.next()) {
                var f = fns_1_1.value;
                var res = f();
                if (res !== null) {
                    return res;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fns_1_1 && !fns_1_1.done && (_a = fns_1.return)) _a.call(fns_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    Parser.prototype.regexAccept = function (match, dpth, cr) {
        var _this = this;
        return this.runner(dpth, function (log) {
            if (log) {
                if (_this.negating) {
                    log("$$!StrMatch");
                }
                else {
                    log("$$StrMatch");
                }
                // We substring from 3 to len - 1 to strip off the
                // non-capture group syntax added as a WebKit workaround
                log(match.substring(3, match.length - 1));
            }
            var reg = new RegExp(match, "y");
            reg.lastIndex = _this.mark().overallPos;
            var res = reg.exec(_this.input);
            if (res) {
                var lineJmp = 0;
                var lind = -1;
                for (var i = 0; i < res[0].length; ++i) {
                    if (res[0][i] === "\n") {
                        ++lineJmp;
                        lind = i;
                    }
                }
                _this.pos = {
                    overallPos: reg.lastIndex,
                    line: _this.pos.line + lineJmp,
                    offset: lind === -1 ? _this.pos.offset + res[0].length : (res[0].length - lind - 1)
                };
                return res[0];
            }
            return null;
        }, cr)();
    };
    Parser.prototype.noConsume = function (fn) {
        var mrk = this.mark();
        var res = fn();
        this.reset(mrk);
        return res;
    };
    Parser.prototype.negate = function (fn) {
        var mrk = this.mark();
        var oneg = this.negating;
        this.negating = !oneg;
        var res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    };
    return Parser;
}());
exports.Parser = Parser;
function parse(s) {
    var p = new Parser(s);
    return p.parse();
}
exports.parse = parse;
var ParseResult = /** @class */ (function () {
    function ParseResult(ast, err) {
        this.ast = ast;
        this.err = err;
    }
    return ParseResult;
}());
exports.ParseResult = ParseResult;
var SyntaxErr = /** @class */ (function () {
    function SyntaxErr(pos, exprules, expmatches) {
        this.pos = pos;
        this.exprules = __spread(exprules);
        this.expmatches = __spread(expmatches);
    }
    SyntaxErr.prototype.toString = function () {
        return "Syntax Error at line " + this.pos.line + ":" + this.pos.offset + ". Tried to match rules " + this.exprules.join(", ") + ". Expected one of " + this.expmatches.map(function (x) { return " '" + x + "'"; });
    };
    return SyntaxErr;
}());
exports.SyntaxErr = SyntaxErr;
var ErrorTracker = /** @class */ (function () {
    function ErrorTracker() {
        this.mxpos = { overallPos: -1, line: -1, offset: -1 };
        this.mnd = -1;
        this.prules = new Set();
        this.pmatches = new Set();
    }
    ErrorTracker.prototype.record = function (pos, depth, result, negating, extraInfo) {
        var _this = this;
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        }
        else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add("not " + extraInfo[1]);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach(function (x) { if (x !== "$$StrMatch" && x !== "$$!StrMatch") {
                _this.prules.add(x);
            } });
        }
    };
    ErrorTracker.prototype.getErr = function () {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    };
    return ErrorTracker;
}());
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34, templateObject_35, templateObject_36, templateObject_37, templateObject_38, templateObject_39, templateObject_40, templateObject_41, templateObject_42, templateObject_43, templateObject_44, templateObject_45, templateObject_46, templateObject_47, templateObject_48, templateObject_49;
