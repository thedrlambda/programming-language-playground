/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---import * as Ast from "./ast";---
* top_level_list_non_empty := _top_level_list_non_empty_1 | _top_level_list_non_empty_2
* _top_level_list_non_empty_1 := _ value=top_level _
*                             .asArray = Ast.TopLevel[] { return [this.value.ast] }
* _top_level_list_non_empty_2 := _ hd=top_level _ tl=top_level_list_non_empty _
*                             .asArray = Ast.TopLevel[] { return [this.hd.ast, ...this.tl.asArray] }
* top_level := func
* func := 'function' _ name=ident _ '\(' params=param_list '\)' _ '{' body=stmt_list '}'
*       .ast = Ast.TopLevel { return new Ast.Function(this.name, this.params.asArray, this.body.asArray) }
* param_list_non_empty := _param_list_non_empty_1 | _param_list_non_empty_2
* param_list := a=param_list_non_empty?
*             .asArray = Ast.ident[] { return this.a === null ? [] : this.a.asArray }
* _param_list_non_empty_1 := _ value=ident _
*                       .asArray = Ast.ident[] { return [this.value] }
* _param_list_non_empty_2 := _ new_=ident _ ',' _ list=param_list_non_empty _
*                       .asArray = Ast.ident[] { return [this.new_, ...this.list.asArray] }
* stmt_list_non_empty := _stmt_list_non_empty_1 | _stmt_list_non_empty_2
* stmt_list := a=stmt_list_non_empty?
*            .asArray = Ast.Stmt[] { return this.a === null ? [] : this.a.asArray }
* _stmt_list_non_empty_1 := _ value=stmt _
*                       .asArray = Ast.Stmt[] { return [this.value.ast] }
* _stmt_list_non_empty_2 := _ list=stmt_list_non_empty _ ',' _ new_=expr _
*                       .asArray = Ast.Stmt[] { return [...this.list.asArray, this.new_.ast] }
* stmt := decl | stmt_no_decl
* stmt_no_decl := short_if 
*               | long_if 
*               | call_stmt
*               | assignment
*               | block
*               | return_
*               | while_
*               | for_
* stmt_no_decl_no_short_if := short_if | stmt_no_short_ifs
* stmt_no_short_ifs := long_if 
*                    | call_stmt
*                    | assignment
*                    | block
*                    | return_
*                    | while_no_short_ifs_
*                    | for_no_short_ifs_
* for_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt
*       .ast = Ast.Stmt { 
*         let w = new Ast.While(this.cond.ast, new Ast.Block([
*           this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
*         ]));
*         return this.decl === null 
*               ? w
*               : new Ast.Block([
*                 this.decl.ast, w
*               ]) 
*       }
* for_no_short_ifs_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt_no_short_ifs
*       .ast = Ast.Stmt { 
*         let w = new Ast.While(this.cond.ast, new Ast.Block([
*           this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
*         ]));
*         return this.decl === null 
*               ? w
*               : new Ast.Block([
*                 this.decl.ast, w
*               ]) 
*       }
* call_stmt := expr=call _ ';' 
*            .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
* assignment := expr=assign _ ';' 
*             .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
* block := '{' _ block=stmt_list _ '}'
*        .ast = Ast.Stmt { return new Ast.Block(this.block.asArray) }
* return_ := 'return' _ expr=expr _ ';'
*         .ast = Ast.Stmt { return new Ast.Return(this.expr.ast) }
* while_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
*        .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }
* while_no_short_ifs_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs
*        .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }
* decl_like := decl | assignment
* decl := 'var' _ assignee=ident _ '=' _ value=expr ';'
*       .ast = Ast.Stmt { return new Ast.Decl(this.assignee, this.value.ast) }
* long_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs _ 'else' _ else_=stmt_no_decl
*          .ast = Ast.Stmt { return new Ast.IfElse(this.condition.ast, this.body.ast, this.else_.ast) }
* short_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
*           .ast = Ast.Stmt { return new Ast.If(this.condition.ast, this.body.ast) }
* arg_list_non_empty := _arg_list_non_empty_1 | _arg_list_non_empty_2
* arg_list := a=arg_list_non_empty?
*           .asArray = Ast.Expr[] { return this.a === null ? [] : this.a.asArray }
* _arg_list_non_empty_1 := _ value=expr _
*                       .asArray = Ast.Expr[] { return [this.value.ast] }
* _arg_list_non_empty_2 := _ list=arg_list_non_empty _ ',' _ new_=expr _
*                       .asArray = Ast.Expr[] { return [...this.list.asArray, this.new_.ast] }
* expr := assign_expr
* assign := assignee=ident _ '=' _ value=assign_expr
*         .ast = Ast.Expr { return new Ast.Assignment(this.assignee, this.value.ast) }
* assign_expr := term | assign
* term := factor | sub
* sub := left=term _ '-' _ right=factor
*      .ast = Ast.Expr { return new Ast.Sub(this.left.ast, this.right.ast) }
* factor := number_expr | paren_expr | variable | call
* paren_expr := '\(' _ expr=expr _ '\)'
*             .ast = Ast.Expr { return this.expr.ast }
* number_expr := num=num
*         .ast = Ast.Expr { return new Ast.NumberExpr(+this.num) }
* variable := v=ident
*           .ast = Ast.Expr { return new Ast.Var(this.v) }
* call := callee=ident _ '\(' args=arg_list '\)'
*       .ast = Ast.Expr { return new Ast.Call(this.callee, this.args.asArray) }
* num := '[0-9]+'
* ident := pos=@ value='[a-zA-Z_][a-zA-Z_0-9]*'
* _ := '\s*'
*/
import * as Ast from "./ast";
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    top_level_list_non_empty_1 = "top_level_list_non_empty_1",
    top_level_list_non_empty_2 = "top_level_list_non_empty_2",
    _top_level_list_non_empty_1 = "_top_level_list_non_empty_1",
    _top_level_list_non_empty_2 = "_top_level_list_non_empty_2",
    top_level = "top_level",
    func = "func",
    param_list_non_empty_1 = "param_list_non_empty_1",
    param_list_non_empty_2 = "param_list_non_empty_2",
    param_list = "param_list",
    _param_list_non_empty_1 = "_param_list_non_empty_1",
    _param_list_non_empty_2 = "_param_list_non_empty_2",
    stmt_list_non_empty_1 = "stmt_list_non_empty_1",
    stmt_list_non_empty_2 = "stmt_list_non_empty_2",
    stmt_list = "stmt_list",
    _stmt_list_non_empty_1 = "_stmt_list_non_empty_1",
    _stmt_list_non_empty_2 = "_stmt_list_non_empty_2",
    stmt_1 = "stmt_1",
    stmt_2 = "stmt_2",
    stmt_no_decl_1 = "stmt_no_decl_1",
    stmt_no_decl_2 = "stmt_no_decl_2",
    stmt_no_decl_3 = "stmt_no_decl_3",
    stmt_no_decl_4 = "stmt_no_decl_4",
    stmt_no_decl_5 = "stmt_no_decl_5",
    stmt_no_decl_6 = "stmt_no_decl_6",
    stmt_no_decl_7 = "stmt_no_decl_7",
    stmt_no_decl_8 = "stmt_no_decl_8",
    stmt_no_decl_no_short_if_1 = "stmt_no_decl_no_short_if_1",
    stmt_no_decl_no_short_if_2 = "stmt_no_decl_no_short_if_2",
    stmt_no_short_ifs_1 = "stmt_no_short_ifs_1",
    stmt_no_short_ifs_2 = "stmt_no_short_ifs_2",
    stmt_no_short_ifs_3 = "stmt_no_short_ifs_3",
    stmt_no_short_ifs_4 = "stmt_no_short_ifs_4",
    stmt_no_short_ifs_5 = "stmt_no_short_ifs_5",
    stmt_no_short_ifs_6 = "stmt_no_short_ifs_6",
    stmt_no_short_ifs_7 = "stmt_no_short_ifs_7",
    for_ = "for_",
    for_no_short_ifs_ = "for_no_short_ifs_",
    call_stmt = "call_stmt",
    assignment = "assignment",
    block = "block",
    return_ = "return_",
    while_ = "while_",
    while_no_short_ifs_ = "while_no_short_ifs_",
    decl_like_1 = "decl_like_1",
    decl_like_2 = "decl_like_2",
    decl = "decl",
    long_if = "long_if",
    short_if = "short_if",
    arg_list_non_empty_1 = "arg_list_non_empty_1",
    arg_list_non_empty_2 = "arg_list_non_empty_2",
    arg_list = "arg_list",
    _arg_list_non_empty_1 = "_arg_list_non_empty_1",
    _arg_list_non_empty_2 = "_arg_list_non_empty_2",
    expr = "expr",
    assign = "assign",
    assign_expr_1 = "assign_expr_1",
    assign_expr_2 = "assign_expr_2",
    term_1 = "term_1",
    term_2 = "term_2",
    sub = "sub",
    factor_1 = "factor_1",
    factor_2 = "factor_2",
    factor_3 = "factor_3",
    factor_4 = "factor_4",
    paren_expr = "paren_expr",
    number_expr = "number_expr",
    variable = "variable",
    call = "call",
    num = "num",
    ident = "ident",
    _ = "_",
}
export type top_level_list_non_empty = top_level_list_non_empty_1 | top_level_list_non_empty_2;
export type top_level_list_non_empty_1 = _top_level_list_non_empty_1;
export type top_level_list_non_empty_2 = _top_level_list_non_empty_2;
export class _top_level_list_non_empty_1 {
    public kind: ASTKinds._top_level_list_non_empty_1 = ASTKinds._top_level_list_non_empty_1;
    public value: top_level;
    public asArray: Ast.TopLevel[];
    constructor(value: top_level){
        this.value = value;
        this.asArray = ((): Ast.TopLevel[] => {
        return [this.value.ast]
        })();
    }
}
export class _top_level_list_non_empty_2 {
    public kind: ASTKinds._top_level_list_non_empty_2 = ASTKinds._top_level_list_non_empty_2;
    public hd: top_level;
    public tl: top_level_list_non_empty;
    public asArray: Ast.TopLevel[];
    constructor(hd: top_level, tl: top_level_list_non_empty){
        this.hd = hd;
        this.tl = tl;
        this.asArray = ((): Ast.TopLevel[] => {
        return [this.hd.ast, ...this.tl.asArray]
        })();
    }
}
export type top_level = func;
export class func {
    public kind: ASTKinds.func = ASTKinds.func;
    public name: ident;
    public params: param_list;
    public body: stmt_list;
    public ast: Ast.TopLevel;
    constructor(name: ident, params: param_list, body: stmt_list){
        this.name = name;
        this.params = params;
        this.body = body;
        this.ast = ((): Ast.TopLevel => {
        return new Ast.Function(this.name, this.params.asArray, this.body.asArray)
        })();
    }
}
export type param_list_non_empty = param_list_non_empty_1 | param_list_non_empty_2;
export type param_list_non_empty_1 = _param_list_non_empty_1;
export type param_list_non_empty_2 = _param_list_non_empty_2;
export class param_list {
    public kind: ASTKinds.param_list = ASTKinds.param_list;
    public a: Nullable<param_list_non_empty>;
    public asArray: Ast.ident[];
    constructor(a: Nullable<param_list_non_empty>){
        this.a = a;
        this.asArray = ((): Ast.ident[] => {
        return this.a === null ? [] : this.a.asArray
        })();
    }
}
export class _param_list_non_empty_1 {
    public kind: ASTKinds._param_list_non_empty_1 = ASTKinds._param_list_non_empty_1;
    public value: ident;
    public asArray: Ast.ident[];
    constructor(value: ident){
        this.value = value;
        this.asArray = ((): Ast.ident[] => {
        return [this.value]
        })();
    }
}
export class _param_list_non_empty_2 {
    public kind: ASTKinds._param_list_non_empty_2 = ASTKinds._param_list_non_empty_2;
    public new_: ident;
    public list: param_list_non_empty;
    public asArray: Ast.ident[];
    constructor(new_: ident, list: param_list_non_empty){
        this.new_ = new_;
        this.list = list;
        this.asArray = ((): Ast.ident[] => {
        return [this.new_, ...this.list.asArray]
        })();
    }
}
export type stmt_list_non_empty = stmt_list_non_empty_1 | stmt_list_non_empty_2;
export type stmt_list_non_empty_1 = _stmt_list_non_empty_1;
export type stmt_list_non_empty_2 = _stmt_list_non_empty_2;
export class stmt_list {
    public kind: ASTKinds.stmt_list = ASTKinds.stmt_list;
    public a: Nullable<stmt_list_non_empty>;
    public asArray: Ast.Stmt[];
    constructor(a: Nullable<stmt_list_non_empty>){
        this.a = a;
        this.asArray = ((): Ast.Stmt[] => {
        return this.a === null ? [] : this.a.asArray
        })();
    }
}
export class _stmt_list_non_empty_1 {
    public kind: ASTKinds._stmt_list_non_empty_1 = ASTKinds._stmt_list_non_empty_1;
    public value: stmt;
    public asArray: Ast.Stmt[];
    constructor(value: stmt){
        this.value = value;
        this.asArray = ((): Ast.Stmt[] => {
        return [this.value.ast]
        })();
    }
}
export class _stmt_list_non_empty_2 {
    public kind: ASTKinds._stmt_list_non_empty_2 = ASTKinds._stmt_list_non_empty_2;
    public list: stmt_list_non_empty;
    public new_: expr;
    public asArray: Ast.Stmt[];
    constructor(list: stmt_list_non_empty, new_: expr){
        this.list = list;
        this.new_ = new_;
        this.asArray = ((): Ast.Stmt[] => {
        return [...this.list.asArray, this.new_.ast]
        })();
    }
}
export type stmt = stmt_1 | stmt_2;
export type stmt_1 = decl;
export type stmt_2 = stmt_no_decl;
export type stmt_no_decl = stmt_no_decl_1 | stmt_no_decl_2 | stmt_no_decl_3 | stmt_no_decl_4 | stmt_no_decl_5 | stmt_no_decl_6 | stmt_no_decl_7 | stmt_no_decl_8;
export type stmt_no_decl_1 = short_if;
export type stmt_no_decl_2 = long_if;
export type stmt_no_decl_3 = call_stmt;
export type stmt_no_decl_4 = assignment;
export type stmt_no_decl_5 = block;
export type stmt_no_decl_6 = return_;
export type stmt_no_decl_7 = while_;
export type stmt_no_decl_8 = for_;
export type stmt_no_decl_no_short_if = stmt_no_decl_no_short_if_1 | stmt_no_decl_no_short_if_2;
export type stmt_no_decl_no_short_if_1 = short_if;
export type stmt_no_decl_no_short_if_2 = stmt_no_short_ifs;
export type stmt_no_short_ifs = stmt_no_short_ifs_1 | stmt_no_short_ifs_2 | stmt_no_short_ifs_3 | stmt_no_short_ifs_4 | stmt_no_short_ifs_5 | stmt_no_short_ifs_6 | stmt_no_short_ifs_7;
export type stmt_no_short_ifs_1 = long_if;
export type stmt_no_short_ifs_2 = call_stmt;
export type stmt_no_short_ifs_3 = assignment;
export type stmt_no_short_ifs_4 = block;
export type stmt_no_short_ifs_5 = return_;
export type stmt_no_short_ifs_6 = while_no_short_ifs_;
export type stmt_no_short_ifs_7 = for_no_short_ifs_;
export class for_ {
    public kind: ASTKinds.for_ = ASTKinds.for_;
    public decl: Nullable<decl_like>;
    public cond: expr;
    public inc: Nullable<assign>;
    public body: stmt;
    public ast: Ast.Stmt;
    constructor(decl: Nullable<decl_like>, cond: expr, inc: Nullable<assign>, body: stmt){
        this.decl = decl;
        this.cond = cond;
        this.inc = inc;
        this.body = body;
        this.ast = ((): Ast.Stmt => {
        let w = new Ast.While(this.cond.ast, new Ast.Block([
          this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
        ]));
        return this.decl === null 
              ? w
              : new Ast.Block([
                this.decl.ast, w
              ])
        })();
    }
}
export class for_no_short_ifs_ {
    public kind: ASTKinds.for_no_short_ifs_ = ASTKinds.for_no_short_ifs_;
    public decl: Nullable<decl_like>;
    public cond: expr;
    public inc: Nullable<assign>;
    public body: stmt_no_short_ifs;
    public ast: Ast.Stmt;
    constructor(decl: Nullable<decl_like>, cond: expr, inc: Nullable<assign>, body: stmt_no_short_ifs){
        this.decl = decl;
        this.cond = cond;
        this.inc = inc;
        this.body = body;
        this.ast = ((): Ast.Stmt => {
        let w = new Ast.While(this.cond.ast, new Ast.Block([
          this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
        ]));
        return this.decl === null 
              ? w
              : new Ast.Block([
                this.decl.ast, w
              ])
        })();
    }
}
export class call_stmt {
    public kind: ASTKinds.call_stmt = ASTKinds.call_stmt;
    public expr: call;
    public ast: Ast.Stmt;
    constructor(expr: call){
        this.expr = expr;
        this.ast = ((): Ast.Stmt => {
        return new Ast.ExprStmt(this.expr.ast)
        })();
    }
}
export class assignment {
    public kind: ASTKinds.assignment = ASTKinds.assignment;
    public expr: assign;
    public ast: Ast.Stmt;
    constructor(expr: assign){
        this.expr = expr;
        this.ast = ((): Ast.Stmt => {
        return new Ast.ExprStmt(this.expr.ast)
        })();
    }
}
export class block {
    public kind: ASTKinds.block = ASTKinds.block;
    public block: stmt_list;
    public ast: Ast.Stmt;
    constructor(block: stmt_list){
        this.block = block;
        this.ast = ((): Ast.Stmt => {
        return new Ast.Block(this.block.asArray)
        })();
    }
}
export class return_ {
    public kind: ASTKinds.return_ = ASTKinds.return_;
    public expr: expr;
    public ast: Ast.Stmt;
    constructor(expr: expr){
        this.expr = expr;
        this.ast = ((): Ast.Stmt => {
        return new Ast.Return(this.expr.ast)
        })();
    }
}
export class while_ {
    public kind: ASTKinds.while_ = ASTKinds.while_;
    public condition: expr;
    public body: stmt_no_decl;
    public ast: Ast.Stmt;
    constructor(condition: expr, body: stmt_no_decl){
        this.condition = condition;
        this.body = body;
        this.ast = ((): Ast.Stmt => {
        return new Ast.While(this.condition.ast, this.body.ast)
        })();
    }
}
export class while_no_short_ifs_ {
    public kind: ASTKinds.while_no_short_ifs_ = ASTKinds.while_no_short_ifs_;
    public condition: expr;
    public body: stmt_no_short_ifs;
    public ast: Ast.Stmt;
    constructor(condition: expr, body: stmt_no_short_ifs){
        this.condition = condition;
        this.body = body;
        this.ast = ((): Ast.Stmt => {
        return new Ast.While(this.condition.ast, this.body.ast)
        })();
    }
}
export type decl_like = decl_like_1 | decl_like_2;
export type decl_like_1 = decl;
export type decl_like_2 = assignment;
export class decl {
    public kind: ASTKinds.decl = ASTKinds.decl;
    public assignee: ident;
    public value: expr;
    public ast: Ast.Stmt;
    constructor(assignee: ident, value: expr){
        this.assignee = assignee;
        this.value = value;
        this.ast = ((): Ast.Stmt => {
        return new Ast.Decl(this.assignee, this.value.ast)
        })();
    }
}
export class long_if {
    public kind: ASTKinds.long_if = ASTKinds.long_if;
    public condition: expr;
    public body: stmt_no_short_ifs;
    public else_: stmt_no_decl;
    public ast: Ast.Stmt;
    constructor(condition: expr, body: stmt_no_short_ifs, else_: stmt_no_decl){
        this.condition = condition;
        this.body = body;
        this.else_ = else_;
        this.ast = ((): Ast.Stmt => {
        return new Ast.IfElse(this.condition.ast, this.body.ast, this.else_.ast)
        })();
    }
}
export class short_if {
    public kind: ASTKinds.short_if = ASTKinds.short_if;
    public condition: expr;
    public body: stmt_no_decl;
    public ast: Ast.Stmt;
    constructor(condition: expr, body: stmt_no_decl){
        this.condition = condition;
        this.body = body;
        this.ast = ((): Ast.Stmt => {
        return new Ast.If(this.condition.ast, this.body.ast)
        })();
    }
}
export type arg_list_non_empty = arg_list_non_empty_1 | arg_list_non_empty_2;
export type arg_list_non_empty_1 = _arg_list_non_empty_1;
export type arg_list_non_empty_2 = _arg_list_non_empty_2;
export class arg_list {
    public kind: ASTKinds.arg_list = ASTKinds.arg_list;
    public a: Nullable<arg_list_non_empty>;
    public asArray: Ast.Expr[];
    constructor(a: Nullable<arg_list_non_empty>){
        this.a = a;
        this.asArray = ((): Ast.Expr[] => {
        return this.a === null ? [] : this.a.asArray
        })();
    }
}
export class _arg_list_non_empty_1 {
    public kind: ASTKinds._arg_list_non_empty_1 = ASTKinds._arg_list_non_empty_1;
    public value: expr;
    public asArray: Ast.Expr[];
    constructor(value: expr){
        this.value = value;
        this.asArray = ((): Ast.Expr[] => {
        return [this.value.ast]
        })();
    }
}
export class _arg_list_non_empty_2 {
    public kind: ASTKinds._arg_list_non_empty_2 = ASTKinds._arg_list_non_empty_2;
    public list: arg_list_non_empty;
    public new_: expr;
    public asArray: Ast.Expr[];
    constructor(list: arg_list_non_empty, new_: expr){
        this.list = list;
        this.new_ = new_;
        this.asArray = ((): Ast.Expr[] => {
        return [...this.list.asArray, this.new_.ast]
        })();
    }
}
export type expr = assign_expr;
export class assign {
    public kind: ASTKinds.assign = ASTKinds.assign;
    public assignee: ident;
    public value: assign_expr;
    public ast: Ast.Expr;
    constructor(assignee: ident, value: assign_expr){
        this.assignee = assignee;
        this.value = value;
        this.ast = ((): Ast.Expr => {
        return new Ast.Assignment(this.assignee, this.value.ast)
        })();
    }
}
export type assign_expr = assign_expr_1 | assign_expr_2;
export type assign_expr_1 = term;
export type assign_expr_2 = assign;
export type term = term_1 | term_2;
export type term_1 = factor;
export type term_2 = sub;
export class sub {
    public kind: ASTKinds.sub = ASTKinds.sub;
    public left: term;
    public right: factor;
    public ast: Ast.Expr;
    constructor(left: term, right: factor){
        this.left = left;
        this.right = right;
        this.ast = ((): Ast.Expr => {
        return new Ast.Sub(this.left.ast, this.right.ast)
        })();
    }
}
export type factor = factor_1 | factor_2 | factor_3 | factor_4;
export type factor_1 = number_expr;
export type factor_2 = paren_expr;
export type factor_3 = variable;
export type factor_4 = call;
export class paren_expr {
    public kind: ASTKinds.paren_expr = ASTKinds.paren_expr;
    public expr: expr;
    public ast: Ast.Expr;
    constructor(expr: expr){
        this.expr = expr;
        this.ast = ((): Ast.Expr => {
        return this.expr.ast
        })();
    }
}
export class number_expr {
    public kind: ASTKinds.number_expr = ASTKinds.number_expr;
    public num: num;
    public ast: Ast.Expr;
    constructor(num: num){
        this.num = num;
        this.ast = ((): Ast.Expr => {
        return new Ast.NumberExpr(+this.num)
        })();
    }
}
export class variable {
    public kind: ASTKinds.variable = ASTKinds.variable;
    public v: ident;
    public ast: Ast.Expr;
    constructor(v: ident){
        this.v = v;
        this.ast = ((): Ast.Expr => {
        return new Ast.Var(this.v)
        })();
    }
}
export class call {
    public kind: ASTKinds.call = ASTKinds.call;
    public callee: ident;
    public args: arg_list;
    public ast: Ast.Expr;
    constructor(callee: ident, args: arg_list){
        this.callee = callee;
        this.args = args;
        this.ast = ((): Ast.Expr => {
        return new Ast.Call(this.callee, this.args.asArray)
        })();
    }
}
export type num = string;
export interface ident {
    kind: ASTKinds.ident;
    pos: PosInfo;
    value: string;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchtop_level_list_non_empty($$dpth: number, $$cr?: ContextRecorder): Nullable<top_level_list_non_empty> {
        return this.choice<top_level_list_non_empty>([
            () => this.matchtop_level_list_non_empty_1($$dpth + 1, $$cr),
            () => this.matchtop_level_list_non_empty_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtop_level_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<top_level_list_non_empty_1> {
        return this.match_top_level_list_non_empty_1($$dpth + 1, $$cr);
    }
    public matchtop_level_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<top_level_list_non_empty_2> {
        return this.match_top_level_list_non_empty_2($$dpth + 1, $$cr);
    }
    public match_top_level_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<_top_level_list_non_empty_1> {
        return this.runner<_top_level_list_non_empty_1>($$dpth,
            (log) => {
                if (log) {
                    log("_top_level_list_non_empty_1");
                }
                let $scope$value: Nullable<top_level>;
                let $$res: Nullable<_top_level_list_non_empty_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchtop_level($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _top_level_list_non_empty_1($scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public match_top_level_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<_top_level_list_non_empty_2> {
        return this.runner<_top_level_list_non_empty_2>($$dpth,
            (log) => {
                if (log) {
                    log("_top_level_list_non_empty_2");
                }
                let $scope$hd: Nullable<top_level>;
                let $scope$tl: Nullable<top_level_list_non_empty>;
                let $$res: Nullable<_top_level_list_non_empty_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$hd = this.matchtop_level($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$tl = this.matchtop_level_list_non_empty($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _top_level_list_non_empty_2($scope$hd, $scope$tl);
                }
                return $$res;
            }, $$cr)();
    }
    public matchtop_level($$dpth: number, $$cr?: ContextRecorder): Nullable<top_level> {
        return this.matchfunc($$dpth + 1, $$cr);
    }
    public matchfunc($$dpth: number, $$cr?: ContextRecorder): Nullable<func> {
        return this.runner<func>($$dpth,
            (log) => {
                if (log) {
                    log("func");
                }
                let $scope$name: Nullable<ident>;
                let $scope$params: Nullable<param_list>;
                let $scope$body: Nullable<stmt_list>;
                let $$res: Nullable<func> = null;
                if (true
                    && this.regexAccept(String.raw`(?:function)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$params = this.matchparam_list($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_list($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new func($scope$name, $scope$params, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matchparam_list_non_empty($$dpth: number, $$cr?: ContextRecorder): Nullable<param_list_non_empty> {
        return this.choice<param_list_non_empty>([
            () => this.matchparam_list_non_empty_1($$dpth + 1, $$cr),
            () => this.matchparam_list_non_empty_2($$dpth + 1, $$cr),
        ]);
    }
    public matchparam_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<param_list_non_empty_1> {
        return this.match_param_list_non_empty_1($$dpth + 1, $$cr);
    }
    public matchparam_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<param_list_non_empty_2> {
        return this.match_param_list_non_empty_2($$dpth + 1, $$cr);
    }
    public matchparam_list($$dpth: number, $$cr?: ContextRecorder): Nullable<param_list> {
        return this.runner<param_list>($$dpth,
            (log) => {
                if (log) {
                    log("param_list");
                }
                let $scope$a: Nullable<Nullable<param_list_non_empty>>;
                let $$res: Nullable<param_list> = null;
                if (true
                    && (($scope$a = this.matchparam_list_non_empty($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new param_list($scope$a);
                }
                return $$res;
            }, $$cr)();
    }
    public match_param_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<_param_list_non_empty_1> {
        return this.runner<_param_list_non_empty_1>($$dpth,
            (log) => {
                if (log) {
                    log("_param_list_non_empty_1");
                }
                let $scope$value: Nullable<ident>;
                let $$res: Nullable<_param_list_non_empty_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _param_list_non_empty_1($scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public match_param_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<_param_list_non_empty_2> {
        return this.runner<_param_list_non_empty_2>($$dpth,
            (log) => {
                if (log) {
                    log("_param_list_non_empty_2");
                }
                let $scope$new_: Nullable<ident>;
                let $scope$list: Nullable<param_list_non_empty>;
                let $$res: Nullable<_param_list_non_empty_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$new_ = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matchparam_list_non_empty($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _param_list_non_empty_2($scope$new_, $scope$list);
                }
                return $$res;
            }, $$cr)();
    }
    public matchstmt_list_non_empty($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_list_non_empty> {
        return this.choice<stmt_list_non_empty>([
            () => this.matchstmt_list_non_empty_1($$dpth + 1, $$cr),
            () => this.matchstmt_list_non_empty_2($$dpth + 1, $$cr),
        ]);
    }
    public matchstmt_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_list_non_empty_1> {
        return this.match_stmt_list_non_empty_1($$dpth + 1, $$cr);
    }
    public matchstmt_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_list_non_empty_2> {
        return this.match_stmt_list_non_empty_2($$dpth + 1, $$cr);
    }
    public matchstmt_list($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_list> {
        return this.runner<stmt_list>($$dpth,
            (log) => {
                if (log) {
                    log("stmt_list");
                }
                let $scope$a: Nullable<Nullable<stmt_list_non_empty>>;
                let $$res: Nullable<stmt_list> = null;
                if (true
                    && (($scope$a = this.matchstmt_list_non_empty($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new stmt_list($scope$a);
                }
                return $$res;
            }, $$cr)();
    }
    public match_stmt_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<_stmt_list_non_empty_1> {
        return this.runner<_stmt_list_non_empty_1>($$dpth,
            (log) => {
                if (log) {
                    log("_stmt_list_non_empty_1");
                }
                let $scope$value: Nullable<stmt>;
                let $$res: Nullable<_stmt_list_non_empty_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchstmt($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _stmt_list_non_empty_1($scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public match_stmt_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<_stmt_list_non_empty_2> {
        return this.runner<_stmt_list_non_empty_2>($$dpth,
            (log) => {
                if (log) {
                    log("_stmt_list_non_empty_2");
                }
                let $scope$list: Nullable<stmt_list_non_empty>;
                let $scope$new_: Nullable<expr>;
                let $$res: Nullable<_stmt_list_non_empty_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matchstmt_list_non_empty($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$new_ = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _stmt_list_non_empty_2($scope$list, $scope$new_);
                }
                return $$res;
            }, $$cr)();
    }
    public matchstmt($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt> {
        return this.choice<stmt>([
            () => this.matchstmt_1($$dpth + 1, $$cr),
            () => this.matchstmt_2($$dpth + 1, $$cr),
        ]);
    }
    public matchstmt_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_1> {
        return this.matchdecl($$dpth + 1, $$cr);
    }
    public matchstmt_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_2> {
        return this.matchstmt_no_decl($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl> {
        return this.choice<stmt_no_decl>([
            () => this.matchstmt_no_decl_1($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_2($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_3($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_4($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_5($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_6($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_7($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_8($$dpth + 1, $$cr),
        ]);
    }
    public matchstmt_no_decl_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_1> {
        return this.matchshort_if($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_2> {
        return this.matchlong_if($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_3($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_3> {
        return this.matchcall_stmt($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_4($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_4> {
        return this.matchassignment($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_5($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_5> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_6($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_6> {
        return this.matchreturn_($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_7($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_7> {
        return this.matchwhile_($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_8($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_8> {
        return this.matchfor_($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_no_short_if($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_no_short_if> {
        return this.choice<stmt_no_decl_no_short_if>([
            () => this.matchstmt_no_decl_no_short_if_1($$dpth + 1, $$cr),
            () => this.matchstmt_no_decl_no_short_if_2($$dpth + 1, $$cr),
        ]);
    }
    public matchstmt_no_decl_no_short_if_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_no_short_if_1> {
        return this.matchshort_if($$dpth + 1, $$cr);
    }
    public matchstmt_no_decl_no_short_if_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_decl_no_short_if_2> {
        return this.matchstmt_no_short_ifs($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs> {
        return this.choice<stmt_no_short_ifs>([
            () => this.matchstmt_no_short_ifs_1($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_2($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_3($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_4($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_5($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_6($$dpth + 1, $$cr),
            () => this.matchstmt_no_short_ifs_7($$dpth + 1, $$cr),
        ]);
    }
    public matchstmt_no_short_ifs_1($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_1> {
        return this.matchlong_if($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_2($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_2> {
        return this.matchcall_stmt($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_3($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_3> {
        return this.matchassignment($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_4($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_4> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_5($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_5> {
        return this.matchreturn_($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_6($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_6> {
        return this.matchwhile_no_short_ifs_($$dpth + 1, $$cr);
    }
    public matchstmt_no_short_ifs_7($$dpth: number, $$cr?: ContextRecorder): Nullable<stmt_no_short_ifs_7> {
        return this.matchfor_no_short_ifs_($$dpth + 1, $$cr);
    }
    public matchfor_($$dpth: number, $$cr?: ContextRecorder): Nullable<for_> {
        return this.runner<for_>($$dpth,
            (log) => {
                if (log) {
                    log("for_");
                }
                let $scope$decl: Nullable<Nullable<decl_like>>;
                let $scope$cond: Nullable<expr>;
                let $scope$inc: Nullable<Nullable<assign>>;
                let $scope$body: Nullable<stmt>;
                let $$res: Nullable<for_> = null;
                if (true
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$decl = this.matchdecl_like($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$cond = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$inc = this.matchassign($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new for_($scope$decl, $scope$cond, $scope$inc, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matchfor_no_short_ifs_($$dpth: number, $$cr?: ContextRecorder): Nullable<for_no_short_ifs_> {
        return this.runner<for_no_short_ifs_>($$dpth,
            (log) => {
                if (log) {
                    log("for_no_short_ifs_");
                }
                let $scope$decl: Nullable<Nullable<decl_like>>;
                let $scope$cond: Nullable<expr>;
                let $scope$inc: Nullable<Nullable<assign>>;
                let $scope$body: Nullable<stmt_no_short_ifs>;
                let $$res: Nullable<for_no_short_ifs_> = null;
                if (true
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$decl = this.matchdecl_like($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$cond = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$inc = this.matchassign($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new for_no_short_ifs_($scope$decl, $scope$cond, $scope$inc, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matchcall_stmt($$dpth: number, $$cr?: ContextRecorder): Nullable<call_stmt> {
        return this.runner<call_stmt>($$dpth,
            (log) => {
                if (log) {
                    log("call_stmt");
                }
                let $scope$expr: Nullable<call>;
                let $$res: Nullable<call_stmt> = null;
                if (true
                    && ($scope$expr = this.matchcall($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new call_stmt($scope$expr);
                }
                return $$res;
            }, $$cr)();
    }
    public matchassignment($$dpth: number, $$cr?: ContextRecorder): Nullable<assignment> {
        return this.runner<assignment>($$dpth,
            (log) => {
                if (log) {
                    log("assignment");
                }
                let $scope$expr: Nullable<assign>;
                let $$res: Nullable<assignment> = null;
                if (true
                    && ($scope$expr = this.matchassign($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new assignment($scope$expr);
                }
                return $$res;
            }, $$cr)();
    }
    public matchblock($$dpth: number, $$cr?: ContextRecorder): Nullable<block> {
        return this.runner<block>($$dpth,
            (log) => {
                if (log) {
                    log("block");
                }
                let $scope$block: Nullable<stmt_list>;
                let $$res: Nullable<block> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$block = this.matchstmt_list($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new block($scope$block);
                }
                return $$res;
            }, $$cr)();
    }
    public matchreturn_($$dpth: number, $$cr?: ContextRecorder): Nullable<return_> {
        return this.runner<return_>($$dpth,
            (log) => {
                if (log) {
                    log("return_");
                }
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<return_> = null;
                if (true
                    && this.regexAccept(String.raw`(?:return)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new return_($scope$expr);
                }
                return $$res;
            }, $$cr)();
    }
    public matchwhile_($$dpth: number, $$cr?: ContextRecorder): Nullable<while_> {
        return this.runner<while_>($$dpth,
            (log) => {
                if (log) {
                    log("while_");
                }
                let $scope$condition: Nullable<expr>;
                let $scope$body: Nullable<stmt_no_decl>;
                let $$res: Nullable<while_> = null;
                if (true
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new while_($scope$condition, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matchwhile_no_short_ifs_($$dpth: number, $$cr?: ContextRecorder): Nullable<while_no_short_ifs_> {
        return this.runner<while_no_short_ifs_>($$dpth,
            (log) => {
                if (log) {
                    log("while_no_short_ifs_");
                }
                let $scope$condition: Nullable<expr>;
                let $scope$body: Nullable<stmt_no_short_ifs>;
                let $$res: Nullable<while_no_short_ifs_> = null;
                if (true
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new while_no_short_ifs_($scope$condition, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matchdecl_like($$dpth: number, $$cr?: ContextRecorder): Nullable<decl_like> {
        return this.choice<decl_like>([
            () => this.matchdecl_like_1($$dpth + 1, $$cr),
            () => this.matchdecl_like_2($$dpth + 1, $$cr),
        ]);
    }
    public matchdecl_like_1($$dpth: number, $$cr?: ContextRecorder): Nullable<decl_like_1> {
        return this.matchdecl($$dpth + 1, $$cr);
    }
    public matchdecl_like_2($$dpth: number, $$cr?: ContextRecorder): Nullable<decl_like_2> {
        return this.matchassignment($$dpth + 1, $$cr);
    }
    public matchdecl($$dpth: number, $$cr?: ContextRecorder): Nullable<decl> {
        return this.runner<decl>($$dpth,
            (log) => {
                if (log) {
                    log("decl");
                }
                let $scope$assignee: Nullable<ident>;
                let $scope$value: Nullable<expr>;
                let $$res: Nullable<decl> = null;
                if (true
                    && this.regexAccept(String.raw`(?:var)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$assignee = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new decl($scope$assignee, $scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public matchlong_if($$dpth: number, $$cr?: ContextRecorder): Nullable<long_if> {
        return this.runner<long_if>($$dpth,
            (log) => {
                if (log) {
                    log("long_if");
                }
                let $scope$condition: Nullable<expr>;
                let $scope$body: Nullable<stmt_no_short_ifs>;
                let $scope$else_: Nullable<stmt_no_decl>;
                let $$res: Nullable<long_if> = null;
                if (true
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_no_short_ifs($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$else_ = this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new long_if($scope$condition, $scope$body, $scope$else_);
                }
                return $$res;
            }, $$cr)();
    }
    public matchshort_if($$dpth: number, $$cr?: ContextRecorder): Nullable<short_if> {
        return this.runner<short_if>($$dpth,
            (log) => {
                if (log) {
                    log("short_if");
                }
                let $scope$condition: Nullable<expr>;
                let $scope$body: Nullable<stmt_no_decl>;
                let $$res: Nullable<short_if> = null;
                if (true
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchstmt_no_decl($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new short_if($scope$condition, $scope$body);
                }
                return $$res;
            }, $$cr)();
    }
    public matcharg_list_non_empty($$dpth: number, $$cr?: ContextRecorder): Nullable<arg_list_non_empty> {
        return this.choice<arg_list_non_empty>([
            () => this.matcharg_list_non_empty_1($$dpth + 1, $$cr),
            () => this.matcharg_list_non_empty_2($$dpth + 1, $$cr),
        ]);
    }
    public matcharg_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<arg_list_non_empty_1> {
        return this.match_arg_list_non_empty_1($$dpth + 1, $$cr);
    }
    public matcharg_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<arg_list_non_empty_2> {
        return this.match_arg_list_non_empty_2($$dpth + 1, $$cr);
    }
    public matcharg_list($$dpth: number, $$cr?: ContextRecorder): Nullable<arg_list> {
        return this.runner<arg_list>($$dpth,
            (log) => {
                if (log) {
                    log("arg_list");
                }
                let $scope$a: Nullable<Nullable<arg_list_non_empty>>;
                let $$res: Nullable<arg_list> = null;
                if (true
                    && (($scope$a = this.matcharg_list_non_empty($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new arg_list($scope$a);
                }
                return $$res;
            }, $$cr)();
    }
    public match_arg_list_non_empty_1($$dpth: number, $$cr?: ContextRecorder): Nullable<_arg_list_non_empty_1> {
        return this.runner<_arg_list_non_empty_1>($$dpth,
            (log) => {
                if (log) {
                    log("_arg_list_non_empty_1");
                }
                let $scope$value: Nullable<expr>;
                let $$res: Nullable<_arg_list_non_empty_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _arg_list_non_empty_1($scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public match_arg_list_non_empty_2($$dpth: number, $$cr?: ContextRecorder): Nullable<_arg_list_non_empty_2> {
        return this.runner<_arg_list_non_empty_2>($$dpth,
            (log) => {
                if (log) {
                    log("_arg_list_non_empty_2");
                }
                let $scope$list: Nullable<arg_list_non_empty>;
                let $scope$new_: Nullable<expr>;
                let $$res: Nullable<_arg_list_non_empty_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matcharg_list_non_empty($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$new_ = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new _arg_list_non_empty_2($scope$list, $scope$new_);
                }
                return $$res;
            }, $$cr)();
    }
    public matchexpr($$dpth: number, $$cr?: ContextRecorder): Nullable<expr> {
        return this.matchassign_expr($$dpth + 1, $$cr);
    }
    public matchassign($$dpth: number, $$cr?: ContextRecorder): Nullable<assign> {
        return this.runner<assign>($$dpth,
            (log) => {
                if (log) {
                    log("assign");
                }
                let $scope$assignee: Nullable<ident>;
                let $scope$value: Nullable<assign_expr>;
                let $$res: Nullable<assign> = null;
                if (true
                    && ($scope$assignee = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchassign_expr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new assign($scope$assignee, $scope$value);
                }
                return $$res;
            }, $$cr)();
    }
    public matchassign_expr($$dpth: number, $$cr?: ContextRecorder): Nullable<assign_expr> {
        return this.choice<assign_expr>([
            () => this.matchassign_expr_1($$dpth + 1, $$cr),
            () => this.matchassign_expr_2($$dpth + 1, $$cr),
        ]);
    }
    public matchassign_expr_1($$dpth: number, $$cr?: ContextRecorder): Nullable<assign_expr_1> {
        return this.matchterm($$dpth + 1, $$cr);
    }
    public matchassign_expr_2($$dpth: number, $$cr?: ContextRecorder): Nullable<assign_expr_2> {
        return this.matchassign($$dpth + 1, $$cr);
    }
    public matchterm($$dpth: number, $$cr?: ContextRecorder): Nullable<term> {
        return this.choice<term>([
            () => this.matchterm_1($$dpth + 1, $$cr),
            () => this.matchterm_2($$dpth + 1, $$cr),
        ]);
    }
    public matchterm_1($$dpth: number, $$cr?: ContextRecorder): Nullable<term_1> {
        return this.matchfactor($$dpth + 1, $$cr);
    }
    public matchterm_2($$dpth: number, $$cr?: ContextRecorder): Nullable<term_2> {
        return this.matchsub($$dpth + 1, $$cr);
    }
    public matchsub($$dpth: number, $$cr?: ContextRecorder): Nullable<sub> {
        return this.runner<sub>($$dpth,
            (log) => {
                if (log) {
                    log("sub");
                }
                let $scope$left: Nullable<term>;
                let $scope$right: Nullable<factor>;
                let $$res: Nullable<sub> = null;
                if (true
                    && ($scope$left = this.matchterm($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchfactor($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new sub($scope$left, $scope$right);
                }
                return $$res;
            }, $$cr)();
    }
    public matchfactor($$dpth: number, $$cr?: ContextRecorder): Nullable<factor> {
        return this.choice<factor>([
            () => this.matchfactor_1($$dpth + 1, $$cr),
            () => this.matchfactor_2($$dpth + 1, $$cr),
            () => this.matchfactor_3($$dpth + 1, $$cr),
            () => this.matchfactor_4($$dpth + 1, $$cr),
        ]);
    }
    public matchfactor_1($$dpth: number, $$cr?: ContextRecorder): Nullable<factor_1> {
        return this.matchnumber_expr($$dpth + 1, $$cr);
    }
    public matchfactor_2($$dpth: number, $$cr?: ContextRecorder): Nullable<factor_2> {
        return this.matchparen_expr($$dpth + 1, $$cr);
    }
    public matchfactor_3($$dpth: number, $$cr?: ContextRecorder): Nullable<factor_3> {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    public matchfactor_4($$dpth: number, $$cr?: ContextRecorder): Nullable<factor_4> {
        return this.matchcall($$dpth + 1, $$cr);
    }
    public matchparen_expr($$dpth: number, $$cr?: ContextRecorder): Nullable<paren_expr> {
        return this.runner<paren_expr>($$dpth,
            (log) => {
                if (log) {
                    log("paren_expr");
                }
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<paren_expr> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new paren_expr($scope$expr);
                }
                return $$res;
            }, $$cr)();
    }
    public matchnumber_expr($$dpth: number, $$cr?: ContextRecorder): Nullable<number_expr> {
        return this.runner<number_expr>($$dpth,
            (log) => {
                if (log) {
                    log("number_expr");
                }
                let $scope$num: Nullable<num>;
                let $$res: Nullable<number_expr> = null;
                if (true
                    && ($scope$num = this.matchnum($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new number_expr($scope$num);
                }
                return $$res;
            }, $$cr)();
    }
    public matchvariable($$dpth: number, $$cr?: ContextRecorder): Nullable<variable> {
        return this.runner<variable>($$dpth,
            (log) => {
                if (log) {
                    log("variable");
                }
                let $scope$v: Nullable<ident>;
                let $$res: Nullable<variable> = null;
                if (true
                    && ($scope$v = this.matchident($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new variable($scope$v);
                }
                return $$res;
            }, $$cr)();
    }
    public matchcall($$dpth: number, $$cr?: ContextRecorder): Nullable<call> {
        return this.runner<call>($$dpth,
            (log) => {
                if (log) {
                    log("call");
                }
                let $scope$callee: Nullable<ident>;
                let $scope$args: Nullable<arg_list>;
                let $$res: Nullable<call> = null;
                if (true
                    && ($scope$callee = this.matchident($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$args = this.matcharg_list($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new call($scope$callee, $scope$args);
                }
                return $$res;
            }, $$cr)();
    }
    public matchnum($$dpth: number, $$cr?: ContextRecorder): Nullable<num> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchident($$dpth: number, $$cr?: ContextRecorder): Nullable<ident> {
        return this.runner<ident>($$dpth,
            (log) => {
                if (log) {
                    log("ident");
                }
                let $scope$pos: Nullable<PosInfo>;
                let $scope$value: Nullable<string>;
                let $$res: Nullable<ident> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z_0-9]*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ident, pos: $scope$pos, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public match_($$dpth: number, $$cr?: ContextRecorder): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchtop_level_list_non_empty(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchtop_level_list_non_empty(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchtop_level_list_non_empty(0, rec);
        return new ParseResult(res,
            rec.getErr() ?? new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<top_level_list_non_empty>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<top_level_list_non_empty>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}