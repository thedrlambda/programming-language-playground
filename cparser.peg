---import * as Ast from "./ast";---
top_level_list_non_empty := _top_level_list_non_empty_1 | _top_level_list_non_empty_2
_top_level_list_non_empty_1 := _ value=top_level _
                            .asArray = Ast.TopLevel[] { return [this.value.ast] }
_top_level_list_non_empty_2 := _ hd=top_level _ tl=top_level_list_non_empty _
                            .asArray = Ast.TopLevel[] { return [this.hd.ast, ...this.tl.asArray] }

top_level := func

func := 'function' _ name=ident _ '\(' params=param_list '\)' _ '{' body=stmt_list '}'
      .ast = Ast.TopLevel { return new Ast.Function(this.name, this.params.asArray, this.body.asArray) }

param_list_non_empty := _param_list_non_empty_1 | _param_list_non_empty_2
param_list := a=param_list_non_empty?
            .asArray = Ast.ident[] { return this.a === null ? [] : this.a.asArray }

_param_list_non_empty_1 := _ value=ident _
                      .asArray = Ast.ident[] { return [this.value] }
_param_list_non_empty_2 := _ new_=ident _ ',' _ list=param_list_non_empty _
                      .asArray = Ast.ident[] { return [this.new_, ...this.list.asArray] }

stmt_list_non_empty := _stmt_list_non_empty_1 | _stmt_list_non_empty_2
stmt_list := a=stmt_list_non_empty?
           .asArray = Ast.Stmt[] { return this.a === null ? [] : this.a.asArray }

_stmt_list_non_empty_1 := _ value=stmt _
                      .asArray = Ast.Stmt[] { return [this.value.ast] }
_stmt_list_non_empty_2 := _ list=stmt_list_non_empty _ ',' _ new_=expr _
                      .asArray = Ast.Stmt[] { return [...this.list.asArray, this.new_.ast] }

stmt := decl | stmt_no_decl
stmt_no_decl := short_if 
              | long_if 
              | call_stmt
              | assignment
              | block
              | return_
              | while_
              | for_
stmt_no_decl_no_short_if := short_if | stmt_no_short_ifs
stmt_no_short_ifs := long_if 
                   | call_stmt
                   | assignment
                   | block
                   | return_
                   | while_no_short_ifs_
                   | for_no_short_ifs_

for_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt
      .ast = Ast.Stmt { 
        let w = new Ast.While(this.cond.ast, new Ast.Block([
          this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
        ]));
        return this.decl === null 
              ? w
              : new Ast.Block([
                this.decl.ast, w
              ]) 
      }
for_no_short_ifs_ := 'for' _ '\(' _ decl=decl_like? _ ';' _ cond=expr _';' _ inc=assign? _ '\)' _ body=stmt_no_short_ifs
      .ast = Ast.Stmt { 
        let w = new Ast.While(this.cond.ast, new Ast.Block([
          this.body.ast, new Ast.ExprStmt(this.inc === null ? new Ast.NumberExpr(0): this.inc.ast)
        ]));
        return this.decl === null 
              ? w
              : new Ast.Block([
                this.decl.ast, w
              ]) 
      }
call_stmt := expr=call _ ';' 
           .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
assignment := expr=assign _ ';' 
            .ast = Ast.Stmt { return new Ast.ExprStmt(this.expr.ast) }
block := '{' _ block=stmt_list _ '}'
       .ast = Ast.Stmt { return new Ast.Block(this.block.asArray) }
return_ := 'return' _ expr=expr _ ';'
        .ast = Ast.Stmt { return new Ast.Return(this.expr.ast) }
while_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
       .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }
while_no_short_ifs_ := 'while' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs
       .ast = Ast.Stmt { return new Ast.While(this.condition.ast, this.body.ast) }

decl_like := decl | assignment

decl := 'var' _ assignee=ident _ '=' _ value=expr ';'
      .ast = Ast.Stmt { return new Ast.Decl(this.assignee, this.value.ast) }

long_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_short_ifs _ 'else' _ else_=stmt_no_decl
         .ast = Ast.Stmt { return new Ast.IfElse(this.condition.ast, this.body.ast, this.else_.ast) }
short_if := 'if' _ '\(' _ condition=expr _ '\)' _ body=stmt_no_decl
          .ast = Ast.Stmt { return new Ast.If(this.condition.ast, this.body.ast) }

arg_list_non_empty := _arg_list_non_empty_1 | _arg_list_non_empty_2
arg_list := a=arg_list_non_empty?
          .asArray = Ast.Expr[] { return this.a === null ? [] : this.a.asArray }

_arg_list_non_empty_1 := _ value=expr _
                      .asArray = Ast.Expr[] { return [this.value.ast] }
_arg_list_non_empty_2 := _ list=arg_list_non_empty _ ',' _ new_=expr _
                      .asArray = Ast.Expr[] { return [...this.list.asArray, this.new_.ast] }

expr := assign_expr
assign := assignee=ident _ '=' _ value=assign_expr
        .ast = Ast.Expr { return new Ast.Assignment(this.assignee, this.value.ast) }
assign_expr := term | assign
term := factor | sub
sub := left=term _ '-' _ right=factor
     .ast = Ast.Expr { return new Ast.Sub(this.left.ast, this.right.ast) }
factor := number_expr | paren_expr | variable | call

paren_expr := '\(' _ expr=expr _ '\)'
            .ast = Ast.Expr { return this.expr.ast }
number_expr := num=num
        .ast = Ast.Expr { return new Ast.NumberExpr(+this.num) }
variable := v=ident
          .ast = Ast.Expr { return new Ast.Var(this.v) }
call := callee=ident _ '\(' args=arg_list '\)'
      .ast = Ast.Expr { return new Ast.Call(this.callee, this.args.asArray) }
num := '[0-9]+'
ident := pos=@ value='[a-zA-Z_][a-zA-Z_0-9]*'

_ := '\s*'
